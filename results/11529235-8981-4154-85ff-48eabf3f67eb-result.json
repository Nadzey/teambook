{"name": "test_organization_link_transfer_user_to_correct_URL", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium header-user-button css-1ujsas3\" tabindex=\"0\" type=\"button\" id=\"openUserMenu\" aria-controls=\"simple-menu\" aria-haspopup=\"true\">...</button> is not clickable at point (1195, 32). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 1; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\">...</div>\n  (Session info: chrome=118.0.5993.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF708F48EF2+54786]\n\t(No symbol) [0x00007FF708EB5612]\n\t(No symbol) [0x00007FF708D6A64B]\n\t(No symbol) [0x00007FF708DB1A6B]\n\t(No symbol) [0x00007FF708DAFE39]\n\t(No symbol) [0x00007FF708DADC08]\n\t(No symbol) [0x00007FF708DACCC3]\n\t(No symbol) [0x00007FF708DA29CF]\n\t(No symbol) [0x00007FF708DCBE6A]\n\t(No symbol) [0x00007FF708DA22E6]\n\t(No symbol) [0x00007FF708DCC080]\n\t(No symbol) [0x00007FF708DE4D02]\n\t(No symbol) [0x00007FF708DCBC43]\n\t(No symbol) [0x00007FF708DA0941]\n\t(No symbol) [0x00007FF708DA1B84]\n\tGetHandleVerifier [0x00007FF709297F52+3524194]\n\tGetHandleVerifier [0x00007FF7092ED800+3874576]\n\tGetHandleVerifier [0x00007FF7092E5D7F+3843215]\n\tGetHandleVerifier [0x00007FF708FE5086+694166]\n\t(No symbol) [0x00007FF708EC0A88]\n\t(No symbol) [0x00007FF708EBCA94]\n\t(No symbol) [0x00007FF708EBCBC2]\n\t(No symbol) [0x00007FF708EACC83]\n\tBaseThreadInitThunk [0x00007FFE07837344+20]\n\tRtlUserThreadStart [0x00007FFE082426B1+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f52d5fbff5be43ea6495037422c1cf25\")>\n\n    def test_organization_link_transfer_user_to_correct_URL(browser):\n        # steps\n        user_menu = UserMenu(browser, PLANNERS_URL)\n>       user_menu.organization_link_open()\n\ntests\\test_header.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\header.py:141: in organization_link_open\n    self.header_instance.open_user_menu()\npages\\header.py:49: in open_user_menu\n    user_menu.click()\n..\\pythonProject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\pythonProject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n..\\pythonProject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F704ED4E20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF708EACC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE07837344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE082426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium header-user-button css-1ujsas3\" tabindex=\"0\" type=\"button\" id=\"openUserMenu\" aria-controls=\"simple-menu\" aria-haspopup=\"true\">...</button> is not clickable at point (1195, 32). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 1; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\">...</div>\nE         (Session info: chrome=118.0.5993.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF708F48EF2+54786]\nE       \t(No symbol) [0x00007FF708EB5612]\nE       \t(No symbol) [0x00007FF708D6A64B]\nE       \t(No symbol) [0x00007FF708DB1A6B]\nE       \t(No symbol) [0x00007FF708DAFE39]\nE       \t(No symbol) [0x00007FF708DADC08]\nE       \t(No symbol) [0x00007FF708DACCC3]\nE       \t(No symbol) [0x00007FF708DA29CF]\nE       \t(No symbol) [0x00007FF708DCBE6A]\nE       \t(No symbol) [0x00007FF708DA22E6]\nE       \t(No symbol) [0x00007FF708DCC080]\nE       \t(No symbol) [0x00007FF708DE4D02]\nE       \t(No symbol) [0x00007FF708DCBC43]\nE       \t(No symbol) [0x00007FF708DA0941]\nE       \t(No symbol) [0x00007FF708DA1B84]\nE       \tGetHandleVerifier [0x00007FF709297F52+3524194]\nE       \tGetHandleVerifier [0x00007FF7092ED800+3874576]\nE       \tGetHandleVerifier [0x00007FF7092E5D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF708FE5086+694166]\nE       \t(No symbol) [0x00007FF708EC0A88]\nE       \t(No symbol) [0x00007FF708EBCA94]\nE       \t(No symbol) [0x00007FF708EBCBC2]\nE       \t(No symbol) [0x00007FF708EACC83]\nE       \tBaseThreadInitThunk [0x00007FFE07837344+20]\nE       \tRtlUserThreadStart [0x00007FFE082426B1+33]\n\n..\\pythonProject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "start": 1698153381067, "stop": 1698153382166, "uuid": "852c13e2-a897-4c74-8802-139dc67cd0ed", "historyId": "787afba9910671b8c36eb3348c00e444", "testCaseId": "787afba9910671b8c36eb3348c00e444", "fullName": "tests.test_header#test_organization_link_transfer_user_to_correct_URL", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_header"}, {"name": "host", "value": "DESKTOP-Q7U6EK1"}, {"name": "thread", "value": "19856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_header"}]}